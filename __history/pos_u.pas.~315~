unit pos_u;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils,
  Vcl.Graphics, Vcl.Forms, Vcl.Grids, PNGImage, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Controls, FireDAC.Comp.DataSet, FireDAC.Comp.Client, System.Classes,
  Data.DB, uCsvProductLoader,
  uPrinter, uCartService, uImageCellDrawer, Vcl.ComCtrls, Vcl.Samples.Spin,
  Vcl.ToolWin, Vcl.WinXCtrls, IdBaseComponent, IdMessage, process_u;

type
  TformProds = class(TForm)
    prodsGrid: TStringGrid;
    prodPnl: TPanel;
    productsMemTable: TFDMemTable;
    productsMemTableid: TIntegerField;
    productsMemTablename: TStringField;
    productsMemTableprice: TFloatField;
    productsMemTableimage: TBlobField;
    cartPnl: TPanel;
    cartGrid: TStringGrid;
    lblProds: TLabel;
    lbTotalPrice: TLabel;
    lblCart: TLabel;
    btnPrint: TButton;
    Timer1: TTimer;
    btnClearCart: TButton;
    spnTotal: TActivityIndicator;

    procedure FormActivate(Sender: TObject);
    procedure prodsGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
      Rect: TRect; State: TGridDrawState);
    procedure prodsGridSelectCell(Sender: TObject; ACol, ARow: LongInt;
      var CanSelect: Boolean);
    procedure cartGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
      Rect: TRect; State: TGridDrawState);
    procedure Timer1Timer(Sender: TObject);
    procedure btnPrintClick(Sender: TObject);
    procedure btnClearCartClick(Sender: TObject);
    procedure lbTotalPriceClick(Sender: TObject);

  private
    { Private declarations }
    procedure FillProductsGrid;
    procedure FillTable;
    procedure DefineCartFirstRow;
    procedure CleanCartGrid;
    procedure UpdateTotalPriceLabel;
  public
    { Public declarations }
  end;

var
  formProds: TformProds;
  totalPrice: Double;
  Initialized: Boolean = False;

const
  PRODUCTS_FILE = 'Data\product.txt';
  IMAGES_FOLDER = 'Images';
  RECEIPTS_FOLDER = 'Receipts';

implementation

{$R *.dfm}

procedure TformProds.FormActivate(Sender: TObject);
begin
  if Initialized then
    Exit;
  Initialized := True;

  if not productsMemTable.Active then
    productsMemTable.Open;

  FillTable;
  FillProductsGrid;
  DefineCartFirstRow;

  totalPrice := 0;
end;

procedure TformProds.lbTotalPriceClick(Sender: TObject);
begin

end;

// Load products from CSV into the memTable
procedure TformProds.FillTable;
var
  productLoader: TProductLoader;
begin
  productLoader := TProductLoader.Create(PRODUCTS_FILE, IMAGES_FOLDER);

  try
    productLoader.LoadProductsToMemTable(productsMemTable);
  finally
    productLoader.Free;
  end;
end;

// Populate product grid with name and price
procedure TformProds.FillProductsGrid;
var
  i: Integer;
begin
  with prodsGrid do
  begin
    RowCount := productsMemTable.RecordCount;
    with productsMemTable do
    begin
      for i := 0 to productsMemTable.RecordCount do
      begin
        Cells[1, i] := productsMemTablename.Value;
        Cells[2, i] := '$' + FloatToStr(productsMemTableprice.Value);
        Next;
      end;

    end;
  end;
end;

// Define headers for cart grid
procedure TformProds.DefineCartFirstRow;
begin
  with cartGrid do
  begin
    RowCount := 0;
    Cells[0, 0] := 'Product';
    Cells[1, 0] := 'Price';
    Cells[2, 0] := 'Quantity';
    Cells[3, 0] := 'Total Price';
  end;
end;

// Draw images in the product grid
procedure TformProds.prodsGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
  Rect: TRect; State: TGridDrawState);
var
  prodImageCellDrawer: TProdImageCellDrawer;
begin
  prodImageCellDrawer := TProdImageCellDrawer.Create(prodsGrid,
    productsMemTable, IMAGES_FOLDER);

  try
    prodImageCellDrawer.DrawCell(ACol, ARow, Rect);
  finally
    prodImageCellDrawer.Free;
  end;
end;

// When a product cell is selected, add or remove it in the cart
procedure TformProds.prodsGridSelectCell(Sender: TObject; ACol, ARow: LongInt;
  var CanSelect: Boolean);
var
  productName: string;
  productPrice: Double;
  cartOperationService: TCartOperationService;
begin
  cartOperationService := TCartOperationService.Create(cartGrid);
  productName := prodsGrid.Cells[1, ARow];

  try
    if productsMemTable.Locate('name', productName, []) then
      productPrice := productsMemTable.FieldByName('price').AsFloat;

    cartOperationService.HandleGridSelectCell(ACol, productName, productPrice);

    UpdateTotalPriceLabel;
  finally
    cartOperationService.Free;
  end;

end;

procedure TformProds.btnClearCartClick(Sender: TObject);
begin
  CleanCartGrid;
end;

// Print cart contents to a JSON file
procedure TformProds.btnPrintClick(Sender: TObject);
var
  frmProcessing: TfrmProcessing;
begin
  // Create the processing form to show a loading indicator while the receipt is being generated
  frmProcessing := TfrmProcessing.Create(nil);

  // Show the processing form to the user
  frmProcessing.Show;

  // Start a background thread to handle the printing operation asynchronously
  TThread.CreateAnonymousThread(
    procedure
    var
      printer: TPrinter;
    begin
      printer := TPrinter.Create(cartGrid, totalPrice, RECEIPTS_FOLDER);
      try
        printer.PrintCartProductsToJsonFile;

      finally
        printer.Free;
      end;
      Sleep(1000);
      // Synchronize with the main thread to safely update the UI
      TThread.Synchronize(nil,
        procedure
        begin
          frmProcessing.spnProcessing.Animate := False;
          frmProcessing.spnProcessing.Visible := False;
          frmProcessing.lbProcess.Caption := 'Receipt Succesfully Processed!';
          frmProcessing.imgCheck.Visible := True;
          frmProcessing.btnClose.Enabled := True;
          CleanCartGrid;
        end);

    end).Start;
end;

// Format cart grid header cells
procedure TformProds.cartGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
Rect: TRect; State: TGridDrawState);
begin
  with cartGrid do
    with Canvas do
    begin
      if ARow = 0 then
      begin
        Font.Style := [fsBold];
        Brush.Color := cl3DLight;
        TextRect(Rect, Rect.Left + (Rect.Width - TextWidth(Cells[ACol, ARow]))
          Div 2, Rect.Top + (Rect.Height - TextHeight(Cells[ACol, ARow])) Div 2,
          Cells[ACol, ARow]);
      end;
    end;

end;

// Clear the shopping cart grid
procedure TformProds.CleanCartGrid;
begin
  cartGrid.RowCount := 0;
  totalPrice := 0;
  lbTotalPrice.Caption := 'Total: ' + FormatFloat('$#,##0.00', totalPrice);
  btnPrint.Enabled := False;
  btnClearCart.Enabled := False;
end;

// Show updated total price
procedure TformProds.UpdateTotalPriceLabel;
begin
  lbTotalPrice.Caption := 'Total: ';
  spnTotal.Animate := True;
  btnPrint.Enabled := False;
  btnClearCart.Enabled := False;
  // Create a background thread to perform the total price calculation
  TThread.CreateAnonymousThread(
    procedure
    var
      i: Integer;
    begin
      totalPrice := 0;

      for i := 1 to cartGrid.RowCount - 1 do

      begin
        totalPrice := totalPrice + (StrToInt(cartGrid.Cells[2, i]) *
          StrToFloat(StringReplace(cartGrid.Cells[1, i], '$', '',
          [rfReplaceAll])));

      end;

      TThread.Sleep(1000);

      // Synchronize with the main thread to safely update the UI
      TThread.Synchronize(nil,
        procedure
        begin
          lbTotalPrice.Caption := 'Total: ' + FormatFloat('$#,##0.00',
            totalPrice);
          spnTotal.Animate := False;
          btnPrint.Enabled := totalPrice > 0;
          btnClearCart.Enabled := totalPrice > 0;
        end);

    end).Start;
end;

procedure TformProds.Timer1Timer(Sender: TObject);
begin
  cartGrid.RowCount := 0;
  UpdateTotalPriceLabel;
end;

end.
