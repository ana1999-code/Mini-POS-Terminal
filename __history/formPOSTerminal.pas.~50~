unit formPOSTerminal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, Dialogs,
  Vcl.Graphics, Vcl.Forms, Vcl.Grids, PNGImage, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Controls, FireDAC.Comp.DataSet, FireDAC.Comp.Client, System.Classes,
  Data.DB, csvProductLoader, formInactivityDialog,
  printer, jsonPrinter, cartService, imageCellDrawer, Vcl.ComCtrls,
  Vcl.Samples.Spin, logger,
  Vcl.ToolWin, Vcl.WinXCtrls, IdBaseComponent, IdMessage, formReceiptProcess;

type
  TformProds = class(TForm)
    prodsGrid: TStringGrid;
    prodPnl: TPanel;
    productsMemTable: TFDMemTable;
    productsMemTableid: TIntegerField;
    productsMemTablename: TStringField;
    productsMemTableprice: TFloatField;
    productsMemTableimage: TBlobField;
    cartPnl: TPanel;
    cartGrid: TStringGrid;
    lblProds: TLabel;
    lbTotalPrice: TLabel;
    lblCart: TLabel;
    btnPrint: TButton;
    tmrInactivity: TTimer;
    btnClearCart: TButton;
    spnTotal: TActivityIndicator;
    lbPosTerminal: TLabel;

    procedure FormActivate(Sender: TObject);
    procedure prodsGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
      Rect: TRect; State: TGridDrawState);
    procedure cartGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
      Rect: TRect; State: TGridDrawState);
    procedure btnPrintClick(Sender: TObject);
    procedure btnClearCartClick(Sender: TObject);
    procedure lbTotalPriceClick(Sender: TObject);
    procedure tmrInactivityTimer(Sender: TObject);
//    procedure prodsGridClick(Sender: TObject);
    procedure prodsGridSelectCell(Sender: TObject; ACol, ARow: LongInt;
      var CanSelect: Boolean);
    procedure cartGridSelectCell(Sender: TObject; ACol, ARow: LongInt;
      var CanSelect: Boolean);
    procedure prodsGridMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);

  private
    { Private declarations }
    procedure FillProductsGrid;
    procedure FillTable;
    procedure DefineCartFirstRow;
    procedure CleanCartGrid;
    procedure UpdateTotalPriceLabel;
    procedure RefreshTimer;
  public
    { Public declarations }
  end;

var
  formProds: TformProds;
  totalPrice: Double;
  Initialized: Boolean = False;

const
  PRODUCTS_FILE = 'Data\products.txt';
  IMAGES_FOLDER = 'Images';
  RECEIPTS_FOLDER = 'Receipts';

implementation

{$R *.dfm}

procedure TformProds.FormActivate(Sender: TObject);
begin
  if Initialized then
    Exit;
  Initialized := True;

  totalPrice := 0;

  if not productsMemTable.Active then
    productsMemTable.Open;

  FillTable;
  if productsMemTable.RecordCount > 0 then
  begin
    FillProductsGrid;
    DefineCartFirstRow;
  end;
end;

procedure TformProds.lbTotalPriceClick(Sender: TObject);
begin

end;

// Load products from CSV into the memTable
procedure TformProds.FillTable;
var
  productLoader: TProductLoader;
begin
  productLoader := TProductLoader.Create(PRODUCTS_FILE, IMAGES_FOLDER);

  try
    productLoader.LoadProductsToMemTable(productsMemTable);
  finally
    productLoader.Free;
  end;
end;

// Populate product grid with name and price
procedure TformProds.FillProductsGrid;
var
  i: Integer;
begin
  with prodsGrid do
  begin
    RowCount := productsMemTable.RecordCount;
    with productsMemTable do
    begin
      for i := 0 to productsMemTable.RecordCount do
      begin
        Cells[1, i] := productsMemTablename.Value;
        Cells[2, i] := '$' + FloatToStr(productsMemTableprice.Value);
        Next;
      end;

    end;
  end;
end;

// Define headers for cart grid
procedure TformProds.DefineCartFirstRow;
begin
  with cartGrid do
  begin
    RowCount := 0;
    Cells[0, 0] := 'Product';
    Cells[1, 0] := 'Price';
    Cells[2, 0] := 'Quantity';
    Cells[3, 0] := 'Total Price';
  end;
end;

// When a product cell is clicked, add or remove it in the cart
//procedure TformProds.prodsGridClick(Sender: TObject);
//var
//  P: TPoint;
//  ACol, ARow: LongInt;
//  productName: string;
//  productPrice: Double;
//  cartOperationService: TCartOperationService;
//begin
//  P := prodsGrid.ScreenToClient(Mouse.CursorPos);
//  prodsGrid.MouseToCell(P.X, P.Y, ACol, ARow);
//
//  if (ACol in [3, 4]) then
//  begin
//    tmrInactivity.Enabled := False;
//    cartOperationService := TCartOperationService.Create(cartGrid);
//    try
//      productName := prodsGrid.Cells[1, ARow];
//
//      if productsMemTable.Locate('name', productName, []) then
//        productPrice := productsMemTable.FieldByName('price').AsFloat
//      else
//        Exit;
//
//      cartOperationService.HandleGridSelectCell(ACol, productName,
//        productPrice);
//
//      UpdateTotalPriceLabel;
//    finally
//      cartOperationService.Free;
//      tmrInactivity.Enabled := True;
//    end;
//  end;
//
//end;

// Draw images in the product grid
procedure TformProds.prodsGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
  Rect: TRect; State: TGridDrawState);
var
  prodImageCellDrawer: TProdImageCellDrawer;
begin
  prodImageCellDrawer := TProdImageCellDrawer.Create(prodsGrid,
    productsMemTable, IMAGES_FOLDER);

  try
    prodImageCellDrawer.DrawCell(ACol, ARow, Rect);
  finally
    prodImageCellDrawer.Free;
  end;
end;

procedure TformProds.prodsGridMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
  ACol, ARow: LongInt;
  productName: string;
  productPrice: Double;
  cartOperationService: TCartOperationService;
begin
  // Convert mouse position to cell coordinates
  prodsGrid.MouseToCell(X, Y, ACol, ARow);

  // Only act if mouse click is on column 3 (Add) or 4 (Remove) and a valid row
  if (Button = mbLeft) and (ACol in [3, 4]) and (ARow >= 1) then
  begin
    tmrInactivity.Enabled := False;
    cartOperationService := TCartOperationService.Create(cartGrid);
    try
      productName := prodsGrid.Cells[1, ARow];

      if productsMemTable.Locate('name', productName, []) then
        productPrice := productsMemTable.FieldByName('price').AsFloat
      else
        Exit;

      cartOperationService.HandleGridSelectCell(ACol, productName, productPrice);
      UpdateTotalPriceLabel;
    finally
      cartOperationService.Free;
      tmrInactivity.Enabled := True;
    end;
  end;
end;

procedure TformProds.btnClearCartClick(Sender: TObject);
begin
  CleanCartGrid;
end;

// Print cart contents to a JSON file
procedure TformProds.btnPrintClick(Sender: TObject);
var
  frmProcessing: TfrmProcessing;
begin
  tmrInactivity.Enabled := False;
  // Create the processing form to show a loading indicator while the receipt is being generated
  frmProcessing := TfrmProcessing.Create(nil);

  // Show the processing form to the user
  frmProcessing.Show;

  // Start a background thread to handle the printing operation asynchronously
  TThread.CreateAnonymousThread(
    procedure
    var
      printer: IPrinter;
    begin
      printer := TJsonPrinter.Create(cartGrid, totalPrice, RECEIPTS_FOLDER);
      try
        printer.PrintCartProductsToJsonFile;

        // Start a background thread to handle the logging operation asynchronously
        TThread.CreateAnonymousThread(
          procedure
          begin
            TLogger.LogToFile('sales.log', 'New sale completed. Total: ' +
              FloatToStrF(totalPrice, ffCurrency, 8, 2));
          end).Start;

      except
        on E: Exception do
          ShowMessage('An error occurred while printing: ' + E.Message);
      end;

      // Mimic a long operation
      Sleep(1000);

      // Synchronize with the main thread to safely update the UI
      TThread.Synchronize(nil,
        procedure
        begin
          frmProcessing.spnProcessing.Animate := False;
          frmProcessing.spnProcessing.Visible := False;
          frmProcessing.lbProcess.Caption := 'Receipt Succesfully Processed!';
          frmProcessing.imgCheck.Visible := True;
          frmProcessing.btnClose.Enabled := True;
          CleanCartGrid;
        end);

    end).Start;
end;

// Format cart grid header cells
procedure TformProds.cartGridDrawCell(Sender: TObject; ACol, ARow: LongInt;
Rect: TRect; State: TGridDrawState);
begin
  with cartGrid do
    with Canvas do
    begin
      if ARow = 0 then
      begin
        Font.Style := [fsBold];
        Brush.Color := cl3DLight;
        TextRect(Rect, Rect.Left + (Rect.Width - TextWidth(Cells[ACol, ARow]))
          Div 2, Rect.Top + (Rect.Height - TextHeight(Cells[ACol, ARow])) Div 2,
          Cells[ACol, ARow]);
      end;
    end;

end;

procedure TformProds.cartGridSelectCell(Sender: TObject; ACol, ARow: LongInt;
var CanSelect: Boolean);
begin
  RefreshTimer;
end;

procedure TformProds.prodsGridSelectCell(Sender: TObject; ACol, ARow: LongInt;
var CanSelect: Boolean);
begin
  RefreshTimer;
end;

// Clear the shopping cart grid
procedure TformProds.CleanCartGrid;
begin
  cartGrid.RowCount := 1;
  totalPrice := 0;
  lbTotalPrice.Caption := 'Total: ' + FloatToStrF(totalPrice, ffCurrency, 8, 2);
  btnPrint.Enabled := False;
  btnClearCart.Enabled := False;
end;

// Show updated total price
procedure TformProds.UpdateTotalPriceLabel;
begin
  lbTotalPrice.Caption := 'Total: ';
  spnTotal.Visible := True;
  spnTotal.Animate := True;
  btnPrint.Enabled := False;
  btnClearCart.Enabled := False;
  // Create a background thread to perform the total price calculation
  TThread.CreateAnonymousThread(
    procedure
    var
      i: Integer;
    begin
      totalPrice := 0;

      for i := 1 to cartGrid.RowCount - 1 do

      begin
        totalPrice := totalPrice + (StrToInt(cartGrid.Cells[2, i]) *
          StrToFloat(StringReplace(cartGrid.Cells[1, i], '$', '',
          [rfReplaceAll])));

      end;

      // Mimic a long operation
      TThread.Sleep(1000);

      // Synchronize with the main thread to safely update the UI
      TThread.Synchronize(nil,
        procedure
        begin
          lbTotalPrice.Caption := 'Total: ' + FloatToStrF(totalPrice,
            ffCurrency, 8, 2);
          spnTotal.Animate := False;
          spnTotal.Visible := False;
          btnPrint.Enabled := totalPrice > 0;
          btnClearCart.Enabled := totalPrice > 0;
        end);

    end).Start;
end;

procedure TformProds.tmrInactivityTimer(Sender: TObject);
var
  InactivityDialog: TfrmInactivityDialog;
begin
  if cartGrid.RowCount > 1 then
  begin
    tmrInactivity.Enabled := False;

    // Show the countdown dialog
    InactivityDialog := TfrmInactivityDialog.Create(Self);
    try
      InactivityDialog.StartCountdown;
      InactivityDialog.ShowModal;
    finally
      InactivityDialog.Free;
    end;

    if not InactivityDialog.Cancelled then
    begin
      // Cleanup after dialog closes
      cartGrid.RowCount := 1;
      totalPrice := 0;
      lbTotalPrice.Caption := 'Total: ' + FloatToStrF(totalPrice,
        ffCurrency, 8, 2);
    end;
    tmrInactivity.Enabled := True;
  end;
end;

procedure TformProds.RefreshTimer;
begin
  tmrInactivity.Enabled := False;
  tmrInactivity.Enabled := True;
end;

end.
