unit uCsvProductLoader;

interface

uses
  System.Classes, System.SysUtils, FireDAC.Comp.Client, Vcl.Graphics,
  Vcl.Dialogs, Vcl.ExtDlgs, opendialog_u, Vcl.Forms;

type
  // Class responsible for loading product data from a CSV file into a TFDMemTable
  TProductLoader = class
  private
    FCsvFilePath: string;
    FImagesFolderPath: string;

  public
    constructor Create(const ACsvFilePath, AImagesFolderPath: string);
    procedure LoadProductsToMemTable(ATable: TFDMemTable);
  end;

implementation

constructor TProductLoader.Create(const ACsvFilePath, AImagesFolderPath
  : string);
begin
  FCsvFilePath := ACsvFilePath;
  FImagesFolderPath := AImagesFolderPath;
end;

// Parses the CSV file and loads each product into the memory table
//procedure TProductLoader.LoadProductsToMemTable(ATable: TFDMemTable);
//var
//  retry: Boolean;
//  csvFileContent, csvLineContent: TStringList;
//  productLine: string;
//  picture: TPicture;
//  frmOpenDialog: TfrmOpenDialog;
//  selectedFile: string;
//begin
//  retry := true;
//  csvFileContent := TStringList.Create;
//  csvLineContent := TStringList.Create;
//  picture := TPicture.Create;
//
//  try
//    while retry do
//    begin
//      try
//        csvFileContent.LoadFromFile(FCsvFilePath);
//        for productLine in csvFileContent do
//        begin
//          csvLineContent.CommaText := productLine;
//          if csvLineContent.count = 4 then
//          begin
//            picture.LoadFromFile(FImagesFolderPath + '\' + csvLineContent[3]);
//            ATable.InsertRecord([StrToInt(csvLineContent[0]), csvLineContent[1],
//              StrToFloat(csvLineContent[2]), picture]);
//            retry := false;
//          end
//          else
//            retry := true;
//        end;
//
//      except
//        // If initial file fails, show dialog to choose another
//        frmOpenDialog := TfrmOpenDialog.Create(nil);
//        try
//          if frmOpenDialog.ShowModal = 1 then
//          begin
//            selectedFile := frmOpenDialog.selectedFile;
//            FCsvFilePath := selectedFile;
//            csvFileContent.LoadFromFile(FCsvFilePath);
//          end
//          else
//            Exit; // user aborted
//        finally
//          frmOpenDialog.Free;
//        end;
//      end;
//
//    end;
//  finally
//    csvFileContent.Free;
//    csvLineContent.Free;
//    picture.Free;
//  end;
//end;
procedure TProductLoader.LoadProductsToMemTable(ATable: TFDMemTable);
var
  csvFileContent, csvLineContent: TStringList;
  productLine: string;
  picture: TPicture;
  frmOpenDialog: TfrmOpenDialog;
  selectedFile: string;
  retry: Boolean;
  lineIndex: Integer;
begin
  csvFileContent := TStringList.Create;
  csvLineContent := TStringList.Create;
  picture := TPicture.Create;

  try
    retry := True;

    while retry do
    begin
      retry := False;
      try
        csvFileContent.LoadFromFile(FCsvFilePath);

        if csvFileContent.Count = 0 then
          raise Exception.Create('File is empty');

        ATable.DisableControls;
        ATable.EmptyDataSet;

        for lineIndex := 0 to csvFileContent.Count - 1 do
        begin
          productLine := csvFileContent[lineIndex];
          csvLineContent.CommaText := productLine;

          if csvLineContent.Count < 4 then
            raise Exception.CreateFmt('Invalid line format at line %d: %s', [lineIndex + 1, productLine]);

          try
            picture.LoadFromFile(FImagesFolderPath + '\' + csvLineContent[3]);
          except
            on E: Exception do
              raise Exception.CreateFmt('Failed to load image for line %d: %s', [lineIndex + 1, E.Message]);
          end;

          ATable.InsertRecord([
            StrToInt(csvLineContent[0]),
            csvLineContent[1],
            StrToFloat(csvLineContent[2]),
            picture
          ]);
        end;

      except
        on E: Exception do
        begin
          MessageDlg('Error: ' + E.Message, mtError, [mbOk], 0);

          frmOpenDialog := TfrmOpenDialog.Create(nil);
          try
            if frmOpenDialog.ShowModal = 1 then
            begin
              selectedFile := frmOpenDialog.SelectedFile;
              FCsvFilePath := selectedFile;
              retry := True;
            end
            else
              Exit; // User aborted
          finally
            frmOpenDialog.Free;
          end;
        end;
      end;
    end;

  finally
    picture.Free;
    csvLineContent.Free;
    csvFileContent.Free;
    ATable.EnableControls;
  end;
end;


end.
